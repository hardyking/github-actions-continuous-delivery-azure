name: Configure Azure environment

on: 
  pull_request:
    types: [labeled]

env:
  AZURE_RESOURCE_GROUP: cd-with-actions
  AZURE_APP_PLAN_PROD: kris-deployment-prod
  AZURE_APP_PLAN_QA: kris-deployment-qa
  AZURE_WEBAPP_NAME_PROD: kris-app-prod
  AZURE_WEBAPP_NAME_QA: kris-app-qa
  AZURE_LOCATION: '"China North 2"'
  IMAGE_REGISTRY_URL: krisacr.azurecr.cn

jobs:
  setup-up-azure-resources:
    runs-on: ubuntu-latest

    if: contains(github.event.pull_request.labels.*.name, 'spin up environment')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: "AzureChinaCloud"

      - name: Create Azure resource group
        if: success()
        run: |
          az group create --location ${{env.AZURE_LOCATION}} --name ${{env.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Create Azure PROD app service plan
        if: success()
        run: |
          az appservice plan create --resource-group ${{env.AZURE_RESOURCE_GROUP}} --name ${{env.AZURE_APP_PLAN_PROD}} --is-linux --sku B1 --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Create PROD webapp resource
        if: success()
        run: |
          az webapp create --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --plan ${{ env.AZURE_APP_PLAN_PROD }} --name ${{ env.AZURE_WEBAPP_NAME_PROD }}  --deployment-container-image-name nginx --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Configure PROD webapp to use Azure registry
        if: success()
        run: |
          az webapp config container set --docker-custom-image-name nginx --docker-registry-server-password ${{ secrets.REGISTRY_PASSWORD }} --docker-registry-server-url ${{ env.IMAGE_REGISTRY_URL }} --docker-registry-server-user ${{ secrets.REGISTRY_USERNAME }} --name ${{ env.AZURE_WEBAPP_NAME_PROD }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Create Azure QA app service plan
        if: success()
        run: |
          az appservice plan create --resource-group ${{env.AZURE_RESOURCE_GROUP}} --name ${{env.AZURE_APP_PLAN_QA}} --is-linux --sku B1 --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Create QA webapp resource
        if: success()
        run: |
          az webapp create --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --plan ${{ env.AZURE_APP_PLAN_QA }} --name ${{ env.AZURE_WEBAPP_NAME_QA }}  --deployment-container-image-name nginx --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Configure QA webapp to use Azure registry
        if: success()
        run: |
          az webapp config container set --docker-custom-image-name nginx --docker-registry-server-password ${{ secrets.REGISTRY_PASSWORD }} --docker-registry-server-url ${{ env.IMAGE_REGISTRY_URL }} --docker-registry-server-user ${{ secrets.REGISTRY_USERNAME }} --name ${{ env.AZURE_WEBAPP_NAME_QA }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

  destroy-azure-resources:
    runs-on: ubuntu-latest

    if: contains(github.event.pull_request.labels.*.name, 'destroy environment')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: "AzureChinaCloud"

      - name: Destroy Azure environment
        if: success()
        run: |
          az group delete --name ${{env.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} --yes
